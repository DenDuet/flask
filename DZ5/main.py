# –°–æ–∑–¥–∞—Ç—å API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. 
# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å POST, PUT, DELETE –∑–∞–ø—Ä–æ—Å—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å User —Å –ø–æ–ª—è–º–∏ id, name, email –∏ password.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ users –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ—Ç–æ–¥ POST).
#     –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–µ—Ç–æ–¥ PUT).
#     –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–µ—Ç–æ–¥ DELETE).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.

# –°–æ–∑–¥–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä Jinja –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è HTML
# —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
# üìå –°–æ–∑–¥–∞–π—Ç–µ HTML —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω
# —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è
# –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ—Ç–æ–¥ GET).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä Jinja.

import logging
from fastapi import FastAPI, Request, requests, Form, Depends, Body
from fastapi.responses import FileResponse, HTMLResponse, JSONResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from models import SessionLocal, User
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session



logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


app = FastAPI()

# app.secret_key = b'5f214cacbd30c2ae4784b520f17912ae0d5d8c16ae98128e3f549546221265e4'

app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

def get_database_session():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/")
@app.get("/users", response_class=HTMLResponse)
def read_users(request: Request, db: Session = Depends(get_database_session)):
    user = db.query(User).all()
    print(user)
    # db.refresh(user)
    return templates.TemplateResponse("users.html", {"request": request, "users": user})

        
@app.post("/users/create", response_class=HTMLResponse)
def create_user(request: Request, db: Session = Depends(get_database_session), username=Form(), email=Form(), password=Form()):
    
        user = User(username, email, password)    
        db.add(user)
        db.commit()
        db.refresh(user)
        
        user = db.query(User).all()
        return templates.TemplateResponse("users.html", {"request":request, "users": user})


@app.get("/users/delete/{user_id}", response_class=HTMLResponse)
def delete_user(request: Request, user_id: int, db: Session = Depends(get_database_session)):
    user = db.query(User).get(user_id)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = {user}")
    if user==None:  
        return JSONResponse(status_code=404, content={ "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
    db.delete(user)  # —É–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç
    db.commit()     # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    db.refresh(user)
    user = db.query(User).all()
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user}")
    return templates.TemplateResponse("users.html", {"request":request, "users": user})


@app.get("/users/edit/{user_id}", response_class=HTMLResponse)
def update_user(request: Request, user_id: int, db: Session = Depends(get_database_session)):
    user = db.query(User).get(user_id)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user}")
    if user==None:  
        return JSONResponse(status_code=404, content={ "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})    
   
    db.commit()
    db.refresh(user)  
    return templates.TemplateResponse("edituser.html", {"request":request, "users": user})


@app.post("/users/update/{user_id}", response_class=HTMLResponse)
def update_user(request: Request, user_id: int, db: Session = Depends(get_database_session), username=Form(), email=Form(), password=Form()):
    user = db.query(User).get(user_id)
    user.username = username
    user.email = email
    user.password = password
    
    # db.update(user)
    db.commit()
    db.refresh(user)      
    user = db.query(User).all()

    
    # print(user)
    return templates.TemplateResponse("users.html", {"request": request, "users": user})    